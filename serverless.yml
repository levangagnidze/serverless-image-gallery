org: levangagnidze
# app: app-image-gallery
service: manage-user

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: ${self:custom.currentStage}
  iamRoleStatements:
  - Effect: Allow  
    Action: # Permission to DynamoDB table
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:  !Join
                - ':'
                - - 'arn:aws:dynamodb'
                  - Ref: 'AWS::Region'
                  - Ref: 'AWS::AccountId'
                  - 'table/${self:custom.userTableName}'
  - Effect: Allow
    Action: # Permission to S# Bucket
      - s3:*
    Resource:  !Join
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: ImageGalleryBucket
                  - '/*'
  - Effect: "Allow"
    Action:
      - "s3:ListBucket"
      - "s3:GetObject"
    Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - Ref: ImageGalleryBucket
                
package:
  exclude:
    - frontend/**
    - resources/**
    - events/**

plugins:
  - serverless-finch

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: app-user-pool-${self:custom.currentStage}
  userPoolClientName: app-user-pool-client-${self:custom.currentStage}
  userTableName: user-${self:custom.currentStage}
  imageGalleryBucketName: levangagnidze-image-gallery-${self:custom.currentStage}
  client:
    bucketName: levangagnidze-gallery-frontend-${self:custom.currentStage}
    distributionFolder: frontend

functions:
  userConfirmed:
    handler: src/cognitoHandler.createNewUser
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PreSignUp
          existing: true
    environment:
      USER_TABLE_NAME: ${self:custom.userTableName}
  manageUser:
    handler: src/manageUserHandler.manageUser
    events:
      - http:
          path: /users
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true
    environment:
      USER_TABLE_NAME: ${self:custom.userTableName}
  manageImage:
    handler: src/manageImagesHandler.manageImage
    events:
      - http:
          path: /images/{imageid}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true
      - http:
          path: /images/{imageid}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true      
    environment:
      IMAGE_GALLERY_BUCKET: ${self:custom.imageGalleryBucketName}  
  manageImages:
    handler: src/manageImagesHandler.manageImages
    events:
      - http:
          path: /images/
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true
      - http:
          path: /images/
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true  
    environment:
      IMAGE_GALLERY_BUCKET: ${self:custom.imageGalleryBucketName}      
    
resources:
  - ${file(resources/cognitoResources.yml)}
  - ${file(resources/dynamoResources.yml)}
  - ${file(resources/s3Resources.yml)}